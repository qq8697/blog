{"meta":{"title":"TA圣堂米拉娜","subtitle":"秘密已经泄露，战斗一触即发！","description":"前端 博客 圣堂","author":"sj","url":"http://blog.wuhongbin.com"},"pages":[{"title":"About","date":"2018-09-25T06:49:07.852Z","updated":"2018-09-25T06:49:07.852Z","comments":true,"path":"about/index.html","permalink":"http://blog.wuhongbin.com/about/index.html","excerpt":"","text":""},{"title":"Categories","date":"2018-09-25T06:34:04.747Z","updated":"2018-01-20T20:45:24.000Z","comments":true,"path":"categories/index.html","permalink":"http://blog.wuhongbin.com/categories/index.html","excerpt":"","text":""},{"title":"Tags","date":"2018-09-25T06:34:00.658Z","updated":"2018-01-20T20:45:24.000Z","comments":true,"path":"tags/index.html","permalink":"http://blog.wuhongbin.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Markdown 语法指南","slug":"markdown-grammar-guide","date":"2018-10-24T07:10:35.000Z","updated":"2018-10-25T01:59:58.800Z","comments":true,"path":"2018/10/markdown-grammar-guide.html","link":"","permalink":"http://blog.wuhongbin.com/2018/10/markdown-grammar-guide.html","excerpt":"使用 Markdown 语法撰写技术文章，只专注于内容和技术，不用费心排版的问题，易写又易读，写作体验非常舒适。这是一份简要的 Markdown 语法指南, :kissing_heart:。","text":"使用 Markdown 语法撰写技术文章，只专注于内容和技术，不用费心排版的问题，易写又易读，写作体验非常舒适。这是一份简要的 Markdown 语法指南, :kissing_heart:。 常用语法0. 强调语法语法： **文字** 文字 1. 标题语法格式： ‘#’ + 空格 + 文本 # 一级标题 ## 二级标题 ### 三级标题 #### 四级标题 ##### 五级标题 ###### 六级标题 2. 列表无序列表语法格式： ‘-‘ + 空格 ＋ 文本 文本一 文本二 文本三 有序列表语法格式： 数字 + ‘.’ + 空格 + 文本 文本一 文本二 文本三 3. 链接和图片插入链接的语法格式： [显示文本](链接地址)我的blog - TA圣堂米拉娜 插入图片的语法格式： ![图片的标注](链接地址) 4. 引用语法格式：’&gt;’ + 空格 + 文本例如： Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，然后转换成格式丰富的HTML页面。 5. 代码行内代码语法： ` + 代码 + `例如： let xhr = new XMLHttpRequest() （使用缩进）代码块语法： // 其他文字 // 空一行 代码块 例如： let xhr = new XMLHttpRequest() xhr.open(&quot;POST&quot;, &quot;/&quot;) xhr.send(&quot;name=&#39;sj&#39;&amp;age=23&quot;) （使用```）代码块语法： ```language 代码块 ``` 例如： let xhr = new XMLHttpRequest() xhr.open(&quot;POST&quot;, &quot;/&quot;) xhr.send(&quot;name=&#39;sj&#39;&amp;age=23&quot;) 6. 表格PS. Markdown语法原生不支持表格，扩展该功能需要其衍生版本。GitHub Flavored Markdown 表格语法（可以使用冒号来定义对齐方式）： | header1 | header2 | | :---| ---:| :---: | | content1-1 | content1-2 | | content2-1 | content2-2 | 例如： 项目 价格 数量 iPhone 6000 元 5 iPad 3800 元 12 iMac 10000 元 234 7. 转义以下符号需要转义，即在符号前添加反斜杠 \\ \\ 反斜线 ` 反引号 * 星号 _ 底线 {} 花括号 [] 方括号 () 括弧 # 井字号 + 加号 - 减号 . 英文句点 ! 惊叹号 结语以上是最常见的 Markdown 的语法和格式，如果希望深入的学习 Markdown，可以参考 Markdown语法说明 以及其它 Markdown 语法扩展版本。 PS. Github Flavored Markdown 的扩展功能包括： 中划线 ~~文本~~ 文本 表格 锚链接 [结语](#结语)结语 任务列表 - [ ] incomplete - [x] commplete emoji表情 :joy: :joy:（emoji-cheat-sheet） PS. 本站使用 marked 将 .md 文件渲染为 dom 结构，解析规则又与 Markdown 及其多种扩展版本些许不同，比如不支持emoji， ╮(╯▽╰)╭ 。","categories":[],"tags":[]},{"title":"你好，圣堂","slug":"hello-templar","date":"2018-10-08T11:19:28.000Z","updated":"2018-10-08T11:59:58.109Z","comments":true,"path":"2018/10/hello-templar.html","link":"","permalink":"http://blog.wuhongbin.com/2018/10/hello-templar.html","excerpt":"秘密已经泄露，战斗一触即发！ 为什么要写博客Q：为什么要写博客？A：尝试 坚持做一件事情 Q：为什么要写博客？A：学会 组织语言","text":"秘密已经泄露，战斗一触即发！ 为什么要写博客Q：为什么要写博客？A：尝试 坚持做一件事情 Q：为什么要写博客？A：学会 组织语言 Q：为什么要写博客？A：完成 一个小工程 Q：为什么要写博客？A：找到 自我和朋友 博客写什么学习、旅行、工作、爱好… 博客站的实现方案有以下两种常见选择： 使用公共平台，自己负责写文章，如CSDN、掘金、简书等以及爬取CSDN文章的各种网站。 不想受制于平台，博客形式和文章内容均由个人完成，有以下两种方案： 动态网站，写一套前台用于展示，写一套后台管理内容，使用数据库存储数据。 静态网站，服务器下是真实存在的静态文件，也有以下两种方案： 前端异步加载 .md 文件，再渲染为 DOM 内容插入 html 中，-&gt; mark2web 站的实现方式。 前端请求获取 .html 文件，.html 文件是由 .md 文件在项目部署前编译生成的 -&gt; 本站的实现方式。 （默认使用 markdown 语法编辑文章内容，而不是使用富文本（RTF(Rich Text Format)））使用公共平台还是自己编程实现，我选择后者，自己动手丰衣足食；为什么不选择动态网站的方案？因为额外需要后台管理系统+数据库+服务器，有些小题大做了，静态站点直接扔到 github pages 托管就可以了。 构成博客站的轮子 域名的购买、备案 -&gt; 阿里云 - 万网 域名解析 -&gt; DNSPOD github pages 托管、自定义域名（CNAME） 静态网站生成器 -&gt; hexo 站内搜索 -&gt; hexo-generator-json-content JavaScript库 -&gt; jQuery JavaScript模板引擎 -&gt; ejs .md 文件渲染为 DOM 结构 -&gt; marked 代码高亮 -&gt; highlightjs 字体图标 -&gt; Font Awesome 页面分享 -&gt; 百度分享 - bshare 文章评论 -&gt; valine 图片画廊 -&gt; lightgallery.js 数据分析 -&gt; 谷歌分析 &amp; 百度统计 Templar Assassin","categories":[],"tags":[]},{"title":"正确的使用GET与POST方法发送请求","slug":"correctly-use-GET-and-POST-method-to-send-requests","date":"2018-09-18T07:10:35.000Z","updated":"2018-10-08T11:22:56.119Z","comments":true,"path":"2018/09/correctly-use-GET-and-POST-method-to-send-requests.html","link":"","permalink":"http://blog.wuhongbin.com/2018/09/correctly-use-GET-and-POST-method-to-send-requests.html","excerpt":"GET请求 -&gt; url上的参数需要转义 function ajax (url, data) { let args = [] for (key in data) { args.push(`${ encodeURIComponent(key) } = ${ encodeURIComponent(data[key]) }`) } let query = args.join(&#39;&amp;&#39;) url += ~url.indexOf(&#39;?&#39;) ? `&amp;${query}` : `?${query}` let xhr = new XMLHttpRequest() xhr.open(&quot;GET&quot;, url) xhr.send() }","text":"GET请求 -&gt; url上的参数需要转义 function ajax (url, data) { let args = [] for (key in data) { args.push(`${ encodeURIComponent(key) } = ${ encodeURIComponent(data[key]) }`) } let query = args.join(&#39;&amp;&#39;) url += ~url.indexOf(&#39;?&#39;) ? `&amp;${query}` : `?${query}` let xhr = new XMLHttpRequest() xhr.open(&quot;GET&quot;, url) xhr.send() } GET请求url参数上 key/value 对中的 value 除了简单类型的变量还可能是数组或者对象，需要做判断与处理： 对象的话使用 encodeURIComponent 会变成对 &quot;[object Object]&quot; 的转义： encodeURIComponent(&quot;[object Object]&quot;) === encodeURIComponent({page:5}) // true &quot;%5Bobject%20Object%5D&quot; 数组 {ids: [1,2,3]} -&gt; ids[0]=1&amp;ids[1]=2&amp;ids[2]=3 对象 {user: {name: &#39;sj&#39;, age: 23}} -&gt; user[name]=&#39;sj&#39;&amp;user[age]=23 POST请求 -&gt; 参数在请求体中 //（url上也可以，因为一般的web框架的POST请求都会收到url和请求体，取决于后端如何处理） 默认的mime类型为 text/plain ，请求参数在 Request Payload 下以 key=value 并由 &amp; 连接形式显示 -&gt; 并不是按照字段分行显示 // 控制台下发送POST请求 let xhr = new XMLHttpRequest() xhr.open(&quot;POST&quot;, &quot;/&quot;) xhr.send(&quot;name=&#39;sj&#39;&amp;age=23&quot;) // 查看请求信息 Request Headers Content-Type: text/pain;charset=UTF-8 Request Payload name=&#39;sj&#39;&amp;age=23 设置 Content-Type 为 &quot;application/x-www-form-urlencoded&quot; -&gt; 请求参数在 Form Data 下按照字段分行显示 // 控制台下发送POST请求 let xhr = new XMLHttpRequest() xhr.open(&quot;POST&quot;, &quot;/&quot;) xhr.setRequestHeader(&quot;Content-type&quot;, &quot;application/x-www-form-urlencoded&quot;); xhr.send(&quot;name=sj&amp;age=23&quot;) // 查看请求信息 Request Headers Content-Type: application/x-www-form-urlencoded Form Data name=&#39;sj&#39; age=23 // 以上send（发送）的是字符串，如果是object呢？-&gt; 如下，实际上调用了 Object 的 toString 方法 -&gt; 所以，send的数据需要转换成字符串。 // 控制台下发送POST请求 let xhr = new XMLHttpRequest() xhr.open(&quot;POST&quot;, &quot;/&quot;) xhr.send({name: &#39;sj&#39;, age: 23}) // 查看请求信息 Request Payload [object Object] 想要使用json格式发送请求，需要指定 Content-Type 为 application/json，然后send的数据要 stringify一下 // 构造json数据 let data = {name: &#39;sj&#39;, age: 23} // 控制台下发送POST请求 let xhr = new XMLHttpRequest() xhr.open(&quot;POST&quot;, &quot;/&quot;) xhr.setRequestHeader(&quot;Content-type&quot;, &quot;application/json&quot;) xhr.send(JSON.stringify(data)) // 查看请求信息 Content-type:application/json Request Payload {&quot;name&quot;:&quot;sj&quot;,&quot;age&quot;:23} mime类型 multipart/form-data，通常用于文件上传，如下所示，Request Payload 下字段和字段之间用随机字符串隔开，内容不需要转义（仍然是中文“圣剑”），因为内容很大的话，转义需要时间 // 构造表单 let formData = new FormData() formData.append(&#39;name&#39;, &#39;圣剑&#39;) formData.append(&#39;age&#39;, 23) // 数字23会被立即转换成字符串 &quot;23&quot; // 上传文件 // formData.append(&quot;file&quot;, input.files[0]) // 控制台下发送POST请求 let xhr = new XMLHttpRequest(); xhr.open(&quot;POST&quot;, &quot;/&quot;) xhr.send(formData) // 查看请求信息 multipart/form-data; boundary=----WebKitFormBoundarywUtUVlMY3HJnC3E3 Request Payload ------WebKitFormBoundarywUtUVlMY3HJnC3E3 Content-Disposition: form-data; name=&quot;name&quot; 圣剑 ------WebKitFormBoundarywUtUVlMY3HJnC3E3 Content-Disposition: form-data; name=&quot;age&quot; 23","categories":[{"name":"HTTP","slug":"HTTP","permalink":"http://blog.wuhongbin.com/categories/HTTP/"},{"name":"GET & POST","slug":"HTTP/GET-POST","permalink":"http://blog.wuhongbin.com/categories/HTTP/GET-POST/"}],"tags":[{"name":"HTTP","slug":"HTTP","permalink":"http://blog.wuhongbin.com/tags/HTTP/"}]}]}